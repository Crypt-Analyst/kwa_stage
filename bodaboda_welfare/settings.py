"""
Django settings for bodaboda_welfare project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config, Config, RepositoryEnv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Custom configuration that prioritizes .env file over system environment variables
env_file = BASE_DIR / '.env'
if env_file.exists():
    # Load from .env file first, then fall back to system environment
    env_config = Config(RepositoryEnv(str(env_file)))
    
    def get_config(key, default=None, cast=str):
        try:
            # Try .env file first
            return env_config(key, default=default, cast=cast)
        except:
            # Fall back to system environment
            return config(key, default=default, cast=cast)
else:
    # If no .env file, use regular config
    get_config = config


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_config('SECRET_KEY', default='django-insecure-7jv8=tz2t_3kztm9r(q45jd!ev9+py+$ra-lzv(@sq^i_br&w1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = get_config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver,kwastage.com,www.kwastage.com', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'authentication',
    'members',
    'contributions',
    'emergency',
    'accidents',
    'bikes',
    'stages',
    'loans',
    'communication',
    'social',
    'safety',
    'payments',
    'financial',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'authentication.middleware.TwoFactorMiddleware',
    'members.middleware.OnlineStatusMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bodaboda_welfare.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'bodaboda_welfare.context_processors.google_maps_api_key',
                'bodaboda_welfare.context_processors.site_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'bodaboda_welfare.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Production PostgreSQL Database (Supabase)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_config('DB_NAME', default='postgres'),
        'USER': get_config('DB_USER', default='postgres'),
        'PASSWORD': get_config('DB_PASSWORD'),
        'HOST': get_config('DB_HOST', default='localhost'),
        'PORT': get_config('DB_PORT', default='5432'),
        'OPTIONS': {
            'sslmode': 'require',
        },
    }
}

# SQLite Database (for local development - uncomment if needed)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Custom settings for Boda Boda Welfare System

# 2FA Settings
OTP_TOTP_ISSUER = 'Boda Boda Welfare System'
OTP_LOGIN_URL = '/auth/login/'

# URLs that require 2FA verification
TWO_FA_REQUIRED_URLS = [
    '/contributions/make-payment/',
    '/contributions/mpesa/',
    '/emergency/report-case/',
    '/loans/apply/',
    '/loans/approve/',
    '/admin/',
    '/settings/',
    '/auth/security/',
]

# Login redirect after 2FA verification
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/auth/login/'

# Session security
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Password security
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = get_config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = get_config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = get_config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = get_config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = get_config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = get_config('DEFAULT_FROM_EMAIL', default='rahasoft.app@gmail.com')
EMAIL_USE_SSL = False

# Account activation
ACCOUNT_ACTIVATION_DAYS = 7  # One week for email verification
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Email verification is mandatory

# SMS Settings (for future implementation)
SMS_BACKEND = 'sms.backends.console.SmsBackend'  # Console backend for development
AFRICASTALKING_USERNAME = config('AFRICASTALKING_USERNAME', default='')
AFRICASTALKING_API_KEY = config('AFRICASTALKING_API_KEY', default='')

# Google OAuth Settings
GOOGLE_OAUTH2_CLIENT_ID = config('GOOGLE_OAUTH2_CLIENT_ID', default='')
GOOGLE_OAUTH2_CLIENT_SECRET = config('GOOGLE_OAUTH2_CLIENT_SECRET', default='')

# Google Maps API Key
GOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY', default='AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw')

# QR Code Settings
QR_CODE_URL_PREFIX = config('QR_CODE_URL_PREFIX', default='https://bodabodawelfare.com/')

# Security Headers and Production Settings
SECURE_SSL_REDIRECT = get_config('SECURE_SSL_REDIRECT', default=False, cast=bool)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_HSTS_SECONDS = get_config('SECURE_HSTS_SECONDS', default=31536000, cast=int)
SECURE_HSTS_INCLUDE_SUBDOMAINS = get_config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True, cast=bool)
SECURE_HSTS_PRELOAD = get_config('SECURE_HSTS_PRELOAD', default=True, cast=bool)
SECURE_CONTENT_TYPE_NOSNIFF = get_config('SECURE_CONTENT_TYPE_NOSNIFF', default=True, cast=bool)
SECURE_BROWSER_XSS_FILTER = get_config('SECURE_BROWSER_XSS_FILTER', default=True, cast=bool)
X_FRAME_OPTIONS = get_config('X_FRAME_OPTIONS', default='DENY')
SECURE_REFERRER_POLICY = get_config('SECURE_REFERRER_POLICY', default='strict-origin-when-cross-origin')

# Session Security
SESSION_COOKIE_SECURE = get_config('SESSION_COOKIE_SECURE', default=False, cast=bool)
SESSION_COOKIE_HTTPONLY = get_config('SESSION_COOKIE_HTTPONLY', default=True, cast=bool)
SESSION_COOKIE_SAMESITE = get_config('SESSION_COOKIE_SAMESITE', default='Lax')
CSRF_COOKIE_SECURE = get_config('CSRF_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_HTTPONLY = get_config('CSRF_COOKIE_HTTPONLY', default=True, cast=bool)
CSRF_COOKIE_SAMESITE = get_config('CSRF_COOKIE_SAMESITE', default='Lax')

# CORS Settings (if using django-cors-headers)
CORS_ALLOW_ALL_ORIGINS = get_config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)
CORS_ALLOWED_ORIGINS = get_config('CORS_ALLOWED_ORIGINS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])

# Error Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_errors.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'bodaboda_welfare': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': get_config('CACHE_BACKEND', default='django.core.cache.backends.locmem.LocMemCache'),
        'LOCATION': get_config('CACHE_LOCATION', default=''),
        'TIMEOUT': get_config('CACHE_TIMEOUT', default=300, cast=int),
        'OPTIONS': {
            'MAX_ENTRIES': get_config('CACHE_MAX_ENTRIES', default=1000, cast=int),
        }
    }
}
